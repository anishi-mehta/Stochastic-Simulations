n=10;k=2;mat=zeros(n,n);%Randomly assign zero and one to each entry in matrixmat = randi([0 1], n,n)%Extend matrix using periodic boundary conditionmatNS = [mat(1, :); mat; mat(end, :)];extMat = [matNS(:, 1) matNS matNS(:, end) ];temp=extMat(end,:);extMat(end,:)=extMat(1,:);extMat(1,:)=temp;temp=extMat(:,1);extMat(:,1)=extMat(:,end);extMat(:,end)=temp;%extMatfor l = 1:10000    %Choose one of the 8 neighbours randomly    r = rand();    i = floor(rand*n)+1+1;    j = floor(rand*n)+1+1;    if r < 0.125      x = extMat(i-1, j);      elseif r < 0.25        x = extMat(i-1, j + 1);       elseif r < 0.375        x = extMat(i, j+1);       elseif r < 0.5        x = extMat(i+1, j+1);       elseif r < 0.625        x = extMat(i+1, j);       elseif r < 0.75        x = extMat(i+1, j-1);        elseif r < 0.875        x = extMat(i-1, j);       else        x = extMat(i-1, j-1);     end    %Change colour of present cell according to chosen neighbour   extMat(i,j) = x;temp=extMat(end-1,:);extMat(end,:)=extMat(2,:);extMat(1,:)=temp;temp=extMat(:,2);extMat(:,1)=extMat(:,end-1);extMat(:,end)=temp;end%extMatmat2 = zeros(n,n);mat2 = extMat(2:end-1, 2:end-1)%With probability 1, the stones will eventually all be the same color. %By watching the program run, you can see that territories are established %and a battle develops to see which color survives. At any time %the probability that a particular color will win out is %equal to the proportion of the array of this color%%mat =%%   0   1   1   1   1   1   0   0   1   0%   1   1   1   0   0   0   1   0   0   0%   1   0   0   0   0   1   0   1   0   0%   0   1   0   1   1   1   0   1   1   0%   1   1   1   0   0   0   0   0   0   0%   1   0   1   0   0   1   1   1   1   1%   0   1   0   1   1   1   1   1   1   1%   1   0   1   0   1   0   0   0   1   0%   0   1   1   0   0   1   0   1   0   1%   1   1   1   0   1   0   0   0   1   1%%mat2 =%%   1   1   1   1   1   1   1   1   1   1%   1   1   1   1   1   1   1   1   1   1%   1   1   1   1   1   1   1   1   1   1%   1   1   1   1   1   1   1   1   1   1%   1   1   1   1   1   1   1   1   1   1%   1   1   1   1   1   1   1   1   1   1%   1   1   1   1   1   1   1   1   1   1%   1   1   1   1   1   1   1   1   1   1%   1   1   1   1   1   1   1   1   1   1%   1   1   1   1   1   1   1   1   1   1